const vscode=require("vscode"),{copyToClipboard}=require("./clipboardHelper"),{getFolderStructure,getFolderStructureAndContent,copyRootFolderPath,copyRootFolderStructure,copyFileContentWithPath}=require("./fileHelpers");let disposables=[];const registerCommands=()=>{console.log("Registering Clipster commands...");const o=vscode.workspace.getConfiguration("clipster"),e=o.get("additionalIgnores",[]);disposables.forEach((o=>o.dispose())),disposables=[],o.get("showCopyFileContentWithHeader",!0)&&disposables.push(vscode.commands.registerCommand("clipster.copyFileContentWithHeader",(async o=>{const e=await copyFileContentWithPath(o);await copyToClipboard(e,"📝 File content with path copied successfully!")}))),o.get("showCopyFolderStructure",!0)&&disposables.push(vscode.commands.registerCommand("clipster.copyFolderStructure",(async o=>{const t=await getFolderStructure(o.fsPath,e);await copyToClipboard(t,"📁 Folder structure copied successfully!")}))),o.get("showCopyFolderStructureAndContent",!0)&&disposables.push(vscode.commands.registerCommand("clipster.copyFolderStructureAndContent",(async o=>{try{const t=await getFolderStructureAndContent(o.fsPath,e);t?await copyToClipboard(t,"📁 Folder structure and content copied successfully!"):vscode.window.showErrorMessage("Failed to retrieve folder structure and content.")}catch(o){vscode.window.showErrorMessage(`Error copying folder structure and content: ${o.message}`)}}))),o.get("showCopyRootFolderPath",!0)&&disposables.push(vscode.commands.registerCommand("clipster.copyRootFolderPath",(async()=>{const o=copyRootFolderPath();await copyToClipboard(o,"📁 Root folder path copied successfully!")}))),o.get("showCopyRootFolderStructure",!0)&&disposables.push(vscode.commands.registerCommand("clipster.copyRootFolderStructure",(async()=>{const o=copyRootFolderStructure(e);await copyToClipboard(o,"📁 Root folder structure copied successfully!")})))};function activate(o){console.log("Activating Clipster..."),vscode.window.showInformationMessage("Clipster extension activated successfully!"),registerCommands(),o.subscriptions.push(vscode.workspace.onDidChangeConfiguration((o=>{o.affectsConfiguration("clipster")&&registerCommands()}))),o.subscriptions.push(new vscode.Disposable((()=>{disposables.forEach((o=>o.dispose()))})))}function deactivate(){console.log("Clipster extension deactivated.")}module.exports={activate,deactivate};